[Main]{
    + use Block,
    + use Symbol,

    Main <- Symbol.Space*# Symbol.LineEnd*# (Block.Block Symbol.Div*#)* "\z"#,
}

[Symbol]{
    Space <- " ",
    LineEnd <- Space* "\n" Space*,
    Div <- Space : "\n",
    CommaDiv <- Div* (",," LineEnd Div* : "," Space*),
    EOF <- "\z",
}

[Misc]{
    SingleID <- [a-zA-Z_] [a-zA-Z0-9_]*,
    ChainID <- SingleID ("."# SingleID)*##,
}

[Attr]{
    + use Misc,
    + use Symbol,

    AttrList <- Attr (Symbol.LineEnd+# Attr)*## Symbol.LineEnd+#,
    Attr <- "@"# Symbol.Div*# Misc.SingleID Symbol.Div*# "["# Symbol.Div*# Value (Symbol.Div*# ","# Symbol.Div*# Value)*## Symbol.Div*# "]"#,
    Value <- ("!")?#Negative Symbol.Div*# Misc.SingleID,
}

[Block]{
    + use Attr,
    + use Misc,
    + use Rule,
    + use Symbol,

    Block <- Attr.AttrList? "["# Symbol.Div*# Misc.SingleID Symbol.Div*# "]"# Symbol.Div*# "{"# Symbol.Div*# (Cmd Symbol.Div*#)*## "}"#,
    Cmd <- CommentCmd : DefineCmd : StartCmd : UseCmd,
    CommentCmd <- "%"# (!"," . : ",,")*## ","#,
    DefineCmd <- Attr.AttrList? Misc.SingleID DefineCmdGenerics? DefineCmdTemplate? Symbol.Div*# "<-"# Symbol.Div*# Rule.PureChoice Symbol.Div*# ","#,
    DefineCmdGenerics <- Symbol.Div*# "<"# Symbol.Div*# Rule.ArgID (Symbol.Div*# ","# Symbol.Div*# Rule.ArgID)*## Symbol.Div*# ">"# Symbol.Div*#,
    DefineCmdTemplate <- Symbol.Div*# "("# Symbol.Div*# Rule.ArgID (Symbol.Div*# ","# Symbol.Div*# Rule.ArgID)*## Symbol.Div*# ")"# Symbol.Div*#,
    StartCmd <- "+"# Symbol.Div*# "start"# Symbol.Div+# Misc.ChainID Symbol.Div*# ","#,
    UseCmd <- "+"# Symbol.Div*# "use"# Symbol.Div+# Misc.ChainID UseCmdBlockAlias? Symbol.Div*# ","#,
    UseCmdBlockAlias <- Symbol.Div+# "as" Symbol.Div+# Misc.SingleID,
}

[Rule]{
    + use Misc,
    + use Symbol,

    PureChoice <- Seq ((Symbol.Div+# ":" Symbol.Div+# : ",")## Seq)*##,
    Choice <- "("# PureChoice ")"#,

    Seq <- SeqElem (Symbol.Div+# SeqElem)*##,
    % (Choice : Expr) に命名する,
    SeqElem <- Lookahead? (Choice : Expr) Loop? RandomOrder? ASTReflectionStyle?,

    Expr <- ArgID : ID : Str : CharClass : Wildcard,

    Lookahead <- "!" : "&",
    Loop <- "?" : "*" : "+" : LoopRange,
    LoopRange <- "{"# Symbol.Div*# Num?#MinNum (Symbol.CommaDiv# Num?#MaxNum)?#MaxNumGroup Symbol.Div*# "}"#,
    RandomOrder <- "^"# RandomOrderRange?,
    RandomOrderRange <- "["# Symbol.Div*# Num?#MinNum (Symbol.Div*# "-"# Symbol.Div*# Num?#MaxNum)?#MaxNumGroup Symbol.Div*# "]"#,
    ASTReflectionStyle <- "##" : "#"# Misc.SingleID?##,

    Num <- [0-9]+,
    ID <- Misc.ChainID Generics? Template?,
    ArgID <- "$"# Misc.SingleID##,
    Generics <- "<"# Symbol.Div*# Seq (Symbol.Div*# ","# Symbol.Div*# Seq)*## Symbol.Div*# ">"#,
    Template <- "("# Symbol.Div*# Seq (Symbol.Div*# ","# Symbol.Div*# Seq)*## Symbol.Div*# ")"#,
    EscSeq <- "\\"# ("\\" : "\"" : "n" : "t" : "z")##,
    Str <- "\""# ((EscSeq : !(("\\" : "\"")) .))*## "\""#,
    CharClass <- "["# (!"[" !"]" !Symbol.LineEnd (("\\[" : "\\]" : "\\\\" : .))##)+## "]"#,
    Wildcard <- ".",
}
