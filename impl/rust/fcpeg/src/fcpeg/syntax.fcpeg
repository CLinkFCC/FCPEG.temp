[Main]{
    + start Syntax.FCPEG,
}

[Syntax]{
    + use Block,
    + use Symbol,

    FCPEG <- Symbol.Space*# Symbol.LineEnd*# (Block.Block Symbol.LineEnd+#)* Symbol.LineEnd*# Symbol.Space*#,
}

[Symbol]{
    Space <- " ",
    LineEnd <- Space* "\n" Space*,
}

[Misc]{
    SingleID <- [a-zA-Z_] [a-zA-Z0-9_]*,
    ChainID <- SingleID ("." SingleID)*,
}

[Block]{
    + use Misc,
    + use Rule,
    + use Symbol,

    Block <- "["# Symbol.Space*# Misc.SingleID Symbol.Space*# "]"# Symbol.Space*# "{"# Symbol.LineEnd+# (Cmd Symbol.LineEnd+#)* "}"#,
    Cmd <- Comment : DefineCmd : StartCmd : UseCmd,
    Comment <- "%"# (!"," !Symbol.LineEnd .)* ",",
    DefineCmd <- Misc.SingleID Symbol.Space*# "<-"# Symbol.Space*# Rule.PureChoice Symbol.Space*# ","#,
    StartCmd <- "+"# Symbol.Space*# "start"# Symbol.Space+# Misc.ChainID Symbol.Space*# ","#,
    UseCmd <- "+"# Symbol.Space*# "use"# Symbol.Space+# Misc.ChainID UseCmdBlockAlias? Symbol.Space*# ","#,
    UseCmdBlockAlias <- Symbol.Space+# "as" Symbol.Space+# Misc.SingleID,
}

[Rule]{
    + use Misc,
    + use Symbol,

    PureChoice <- Seq (Symbol.Space# ":"# Symbol.Space# Seq)*,
    Choice <- "("# PureChoice ")"#,
    Seq <- SeqElem (Symbol.Space+# SeqElem)*,
    SeqElem <- Lookahead? (Choice : Expr) Loop? RandomOrder? ASTReflection?,
    Expr <- ID : Str : CharClass : Wildcard,

    Lookahead <- "!" : "&",
    Loop <- "?" : "*" : "+" : LoopRange,
    LoopRange <- "{"# Num? ","# Num? "}"#,
    RandomOrder <- "^"# RandomOrderRange?,
    RandomOrderRange <- "["# Num? ","# Num? "]"#,
    ASTReflection <- "#"# Misc.SingleID?,

    Num <- [0-9]+,
    ID <- Misc.ChainID,
    EscSeq <- "\\" ("\\" : "0" : "\"" : "n"),
    Str <- "\""# ((EscSeq : !(("\\" : "\"")) .))+ "\""#,
    CharClass <- "["# (!"[" !"]" !Symbol.LineEnd ("\\[" : "\\]" : .))+ "]"#,
    Wildcard <- "."#,
}
