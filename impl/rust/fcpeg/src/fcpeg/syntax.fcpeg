[Main]{
    + start Syntax.FCPEG,
}

[Syntax]{
    + use Block,
    + use Symbol,

    FCPEG <- Symbol.Space*# Symbol.LineEnd*# (Block.Block Symbol.LineEnd+#)* Symbol.LineEnd*# Symbol.Space*# Symbol.EOF#,
}

[Symbol]{
    Space <- " ",
    LineEnd <- Space* "\n" Space*,
    EOF <- "\z",
}

[Misc]{
    SingleID <- [a-zA-Z_] [a-zA-Z0-9_]*,
    ChainID <- SingleID ("."# SingleID)*##,
}

[Block]{
    + use Misc,
    + use Rule,
    + use Symbol,

    Block <- "["# Symbol.Space*# Misc.SingleID Symbol.Space*# "]"# Symbol.Space*# "{"# Symbol.LineEnd+# (Cmd Symbol.LineEnd+#)* "}"#,
    Cmd <- CommentCmd : DefineCmd : StartCmd : UseCmd,
    CommentCmd <- "%"# (!"," !Symbol.LineEnd .)*## ","#,
    DefineCmd <- Misc.SingleID DefineCmdGenericsIDs? DefineCmdFuncIDs? Symbol.Space*# "<-"# Symbol.Space*# Rule.PureChoice Symbol.Space*# ","#,
    DefineCmdGenericsIDs <- "<"# Rule.ArgID (","# Symbol.Space# Rule.ArgID)*## ">"#,
    DefineCmdFuncIDs <- "("# Rule.ArgID (","# Symbol.Space# Rule.ArgID)*## ")"#,
    StartCmd <- "+"# Symbol.Space*# "start"# Symbol.Space+# Misc.ChainID Symbol.Space*# ","#,
    UseCmd <- "+"# Symbol.Space*# "use"# Symbol.Space+# Misc.ChainID UseCmdBlockAlias? Symbol.Space*# ","#,
    UseCmdBlockAlias <- Symbol.Space+# "as" Symbol.Space+# Misc.SingleID,
}

[Rule]{
    + use Misc,
    + use Symbol,

    InstantPureChoice <- Seq ("," Symbol.Space# Seq)*##,
    PureChoice <- Seq ((SeqDiv+# ":" SeqDiv+# : ",")## Seq)*##,
    Choice <- "("# PureChoice ")"#,

    SeqDiv <- Symbol.Space# : "\n"#,
    Seq <- SeqElem (SeqDiv+# SeqElem)*##,
    % (Choice : Expr) に命名する,
    SeqElem <- Lookahead? (Choice : Expr) Loop? RandomOrder? ASTReflectionStyle?,

    Expr <- Generics : ArgID : Func : ID : Str : CharClass : Wildcard,

    Lookahead <- "!" : "&",
    Loop <- "?" : "*" : "+" : LoopRange,
    LoopRange <- "{"# (Num : "")## ","# (Num : "")## "}"#,
    RandomOrder <- "^"# RandomOrderRange?,
    RandomOrderRange <- "["# Num? ","# Num? "]"#,
    ASTReflectionStyle <- "##" : "#"# Misc.SingleID?##,

    Num <- [0-9]+,
    ID <- Misc.ChainID,
    ArgID <- "$"# Misc.SingleID##,
    Generics <- Misc.ChainID "<"# InstantPureChoice (","# Symbol.Space# InstantPureChoice)*## ">"#,
    Func <- Misc.ChainID "("# InstantPureChoice (","# Symbol.Space# InstantPureChoice)*## ")"#,
    EscSeq <- "\\"# ("\\" : "\"" : "n" : "t" : "z")##,
    Str <- "\""# ((EscSeq : !(("\\" : "\"")) .))*## "\""#,
    CharClass <- "["# (!"[" !"]" !Symbol.LineEnd (("\\[" : "\\]" : "\\\\" : .))##)+## "]"#,
    Wildcard <- ".",
}
